@model GBCV.Models.CVModels

@{
    ViewBag.Title = $"{Model.FullName} | Computer and Information Science Student";
}

<div class="container my-4">
    <!-- Profile Section -->
    <div class="profile-section text-center mb-4 p-4 rounded will-animate"
         style="background: linear-gradient(135deg, var(--vc-blue), var(--primary-purple)); color: white;"
         data-animation="fadeInUp">

        <!-- Profile Image -->
        <div class="profile-img-container mb-3">
            <img src="~/profile.jpeg" alt="@Model.FullName"
                 class="profile-img rounded-circle shadow-lg hover-grow float-animate"
                 style="width: 150px; height: 150px; object-fit: cover; border: 4px solid white;"
                 data-animation="bounceIn" data-delay="0.2s">
        </div>

        <h1 class="mt-3 will-animate" data-animation="fadeInUp" data-delay="0.3s">@Model.FullName</h1>
        <h3 class="text-light will-animate" data-animation="fadeInUp" data-delay="0.4s">Computer and Information Science Student | Varsity College Sandton</h3>
    </div>

    <div class="row">
        <!-- Left Sidebar -->
        <div class="col-lg-4">
            @await Html.PartialAsync("Partials/ContactPartial", Model)
            @await Html.PartialAsync("Partials/SkillsPartial", Model)
            @await Html.PartialAsync("Partials/CourseworkPartial", Model)
        </div>

        <!-- Main Content -->
        <div class="col-lg-8">
            @await Html.PartialAsync("Partials/StudentSummaryPartial", Model)
            @await Html.PartialAsync("Partials/EducationPartial", Model)
            @await Html.PartialAsync("Partials/ExperiencePartial", Model)
          
        </div>
    </div>
</div>

<style>
    /* Tech Animation Styles */
    .tech-animations {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
    }

    .circuit-line {
        position: absolute;
        height: 2px;
        background: linear-gradient(90deg, transparent, var(--primary-purple), transparent);
        animation: circuitGlow 6s linear infinite;
        opacity: 0.1;
    }

    .binary-dots {
        position: absolute;
        width: 100px;
        height: 100px;
        background: radial-gradient(circle, rgba(126,87,194,0.1) 0%, transparent 70%);
        animation: pulseBinary 4s ease infinite;
    }

    .matrix-effect {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><text x="10" y="20" font-family="monospace" font-size="12" fill="rgba(126,87,194,0.05)">0101</text></svg>');
        opacity: 0.3;
        z-index: 0;
    }

    /* Cyber Card Styles */
    .cyber-card {
        background: rgba(15, 10, 29, 0.7);
        border: 1px solid var(--primary-purple);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 0 15px rgba(126, 87, 194, 0.2);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .cyber-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 25px rgba(126, 87, 194, 0.4);
        }

    /* Holographic Elements */
    #holographic-card {
        position: relative;
        display: inline-block;
    }

    .holographic-edge {
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid transparent;
        border-image: linear-gradient(45deg, var(--primary-purple), var(--accent-gold), var(--primary-purple)) 1;
        animation: hologramPulse 3s linear infinite;
        border-radius: 50%;
        pointer-events: none;
    }

    /* Text Animations */
    .text-stroke {
        color: transparent;
        -webkit-text-stroke: 1px white;
        text-stroke: 1px white;
        animation: textGlow 2s ease-in-out infinite alternate;
    }

    .typewriter-animation {
        overflow: hidden;
        border-right: 3px solid var(--primary-purple);
        white-space: nowrap;
        margin: 0 auto;
        animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
    }

    /* Animation Definitions */
    @@keyframes circuitGlow {
        0% {
            width: 0%;
            opacity: 0;
        }

        10% {
            opacity: 0.3;
        }

        90% {
            opacity: 0.3;
        }

        100% {
            width: 200px;
            opacity: 0;
        }
    }

    @@keyframes pulseBinary {
        0%, 100% {
            transform: scale(1);
            opacity: 0.1;
        }

        50% {
            transform: scale(1.2);
            opacity: 0.3;
        }
    }

    @@keyframes hologramPulse {
        0% {
            opacity: 0.7;
        }

        50% {
            opacity: 0.3;
        }

        100% {
            opacity: 0.7;
        }
    }

    @@keyframes textGlow {
        from {
            text-shadow: 0 0 5px rgba(255,255,255,0.3);
        }

        to {
            text-shadow: 0 0 15px rgba(126,87,194,0.7);
        }
    }

    @@keyframes typing {
        from {
            width: 0
        }

        to {
            width: 100%
        }
    }

    @@keyframes blink-caret {
        from, to {
            border-color: transparent
        }

        50% {
            border-color: var(--primary-purple)
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize advanced animations
        const animateTechElements = () => {
            // Create floating tech elements
            const techContainer = document.querySelector('.tech-animations');
            for (let i = 0; i < 10; i++) {
                const element = document.createElement('div');
                element.className = Math.random() > 0.5 ? 'circuit-line' : 'binary-dots';
                element.style.left = `${Math.random() * 100}%`;
                element.style.top = `${Math.random() * 100}%`;
                element.style.animationDelay = `${Math.random() * 5}s`;
                techContainer.appendChild(element);
            }

            // Add interactive project cards
            const projects = document.querySelectorAll('.project-grid .card');
            projects.forEach(project => {
                project.addEventListener('mousemove', (e) => {
                    const rect = project.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    project.style.transform = `perspective(1000px) rotateX(${(y - rect.height/2)/20}deg) rotateY(${-(x - rect.width/2)/20}deg)`;
                });

                project.addEventListener('mouseleave', () => {
                    project.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
                });
            });
        };

        animateTechElements();
    });
</script>
